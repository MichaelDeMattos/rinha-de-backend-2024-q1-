# -*- coding: utf-8 -*-

import os
import fdb
import traceback
from schemas.client import ClientListSchema, ClientSchema

FIREBIRD_DSN = os.getenv('FIREBIRD_DSN')
FIREBIRD_USER = os.getenv('FIREBIRD_USER')
FIREBIRD_PASSWORD = os.getenv('FIREBIRD_PASSWORD')


async def create_user(user: ClientSchema) -> bool:
    """
    :return:
    """
    try:
        with fdb.connect(dsn=FIREBIRD_DSN, user=FIREBIRD_USER, password=FIREBIRD_PASSWORD) as connection:
            cursor = connection.cursor()
            cursor.execute(
                "INSERT INTO MOVEMENTS"
                " (CLI_ID, CLI_LIM_ORG, SALDO_TOTAL,"
                "  SALDO_LIM, UTL_TRANS_DESC, UTL_TRANS_REAL_EM,"
                "  UTL_TRANS_TIPO, UTL_TRANS_VALOR)"
                "  VALUES"
                f" ({user.id}, {user.limite}, 0, {user.limite}, 'balance-0', CURRENT_TIMESTAMP, 'c', 0)")
            connection.commit()
            return True
    except Exception:
        traceback.print_exc()
        return False


async def create_table() -> bool:
    """
    :return:
    """
    try:
        with fdb.connect(dsn=FIREBIRD_DSN, user=FIREBIRD_USER, password=FIREBIRD_PASSWORD) as connection:
            cursor = connection.cursor()
            # drop old struct
            try:
                cursor.execute('DROP EXCEPTION LIMIT_EXCEEDED')
                cursor.execute('DROP EXCEPTION CLIENT_NOT_FOUND')
                cursor.execute('DROP TABLE MOVEMENTS')
                cursor.execute('DROP PROCEDURE GET_MOVEMENTS')
                cursor.execute('DROP PROCEDURE INSERT_CREDIT_ON_MOVEMENTS')
                cursor.execute('DROP PROCEDURE INSERT_DEBIT_ON_MOVEMENTS')
                connection.commit()
            except Exception:
                pass
            # create exceptions
            cursor.execute(''' CREATE EXCEPTION LIMIT_EXCEEDED 'Limit exceeded' ''')
            cursor.execute(''' CREATE EXCEPTION CLIENT_NOT_FOUND 'Client not found' ''')
            # create empty table
            cursor.execute('''
                CREATE TABLE MOVEMENTS (
                    ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                    CLI_ID INTEGER NOT NULL,
                    CLI_LIM_ORG INTEGER NOT NULL,
                    SALDO_TOTAL INTEGER NOT NULL,
                    SALDO_LIM INTEGER NOT NULL CHECK (SALDO_LIM >= 0),
                    UTL_TRANS_DESC VARCHAR(10),
                    UTL_TRANS_REAL_EM TIMESTAMP NOT NULL,
                    UTL_TRANS_TIPO CHAR(1) CHECK (UTL_TRANS_TIPO IN ('c', 'd')),
                    UTL_TRANS_VALOR INTEGER,
                    CONSTRAINT MOV_PK PRIMARY KEY (ID))''')
            # set default CURRENT_TIMESTAMP for UTL_TRANS_REAL_EM
            cursor.execute(
                'ALTER TABLE MOVEMENTS ALTER COLUMN UTL_TRANS_REAL_EM SET DEFAULT CURRENT_TIMESTAMP')
            # create procedure for select movements
            cursor.execute('''
                CREATE PROCEDURE GET_MOVEMENTS (ClientID INT)
                RETURNS (
                    ID INT,
                    CLI_ID INT,
                    CLI_LIM_ORG INT,
                    SALDO_TOTAL INT,
                    SALDO_LIM INT,
                    UTL_TRANS_DESC VARCHAR(10),
                    UTL_TRANS_REAL_EM TIMESTAMP,
                    UTL_TRANS_TIPO CHAR(1),
                    UTL_TRANS_VALOR INT)
                AS
                BEGIN
                    FOR SELECT FIRST 10
                            MV.ID,
                            MV.CLI_ID,
                            MV.CLI_LIM_ORG,
                            MV.SALDO_TOTAL,
                            MV.SALDO_LIM,
                            MV.UTL_TRANS_DESC,
                            MV.UTL_TRANS_REAL_EM,
                            MV.UTL_TRANS_TIPO,
                            MV.UTL_TRANS_VALOR
                        FROM MOVEMENTS AS MV
                        WHERE MV.CLI_ID = :ClientID
                        ORDER BY MV.ID DESC
                    INTO :ID,
                         :CLI_ID,
                         :CLI_LIM_ORG,
                         :SALDO_TOTAL,
                         :SALDO_LIM,
                         :UTL_TRANS_DESC,
                         :UTL_TRANS_REAL_EM,
                         :UTL_TRANS_TIPO,
                         :UTL_TRANS_VALOR
                    DO
                    BEGIN
                        SUSPEND;
                    END
                END''')
            cursor.execute('''
                CREATE PROCEDURE INSERT_CREDIT_ON_MOVEMENTS (ClientID INT, TransValor INT, TransDesc VARCHAR(10))
                RETURNS (RET_SALDO_LIM INT, RET_SALDO_TOTAL INT)
                AS
                DECLARE
                    TOTAL INT;
                DECLARE
                    LIMITE INT;
                DECLARE
                    OLD_CLI_LIM_ORG INT;	
                DECLARE
                    OLD_SALDO_TOTAL INT;
                DECLARE
                    OLD_SALDO_LIM INT;
                BEGIN
                    SELECT FIRST 1 MV.CLI_LIM_ORG, MV.SALDO_TOTAL, MV.SALDO_LIM
                    FROM MOVEMENTS AS MV
                    WHERE MV.CLI_ID = :ClientID
                    ORDER BY MV.ID DESC
                    INTO :OLD_CLI_LIM_ORG, :OLD_SALDO_TOTAL, :OLD_SALDO_LIM;
                    TOTAL = OLD_SALDO_TOTAL + TransValor;
                    LIMITE = OLD_SALDO_LIM + TransValor;
                    IF (LIMITE > OLD_CLI_LIM_ORG) THEN
                    BEGIN
                        LIMITE = OLD_CLI_LIM_ORG;
                    END
                    INSERT INTO MOVEMENTS
                        (CLI_ID, CLI_LIM_ORG, SALDO_TOTAL,
                         SALDO_LIM, UTL_TRANS_DESC, UTL_TRANS_REAL_EM,
                         UTL_TRANS_TIPO, UTL_TRANS_VALOR)
                    VALUES
                        (:ClientID, :OLD_CLI_LIM_ORG, :TOTAL,
                         :LIMITE, :TransDesc, CURRENT_TIMESTAMP,
                         'c', :TransValor);
                    RET_SALDO_LIM = LIMITE;
                    RET_SALDO_TOTAL = TOTAL;
                END''')
            cursor.execute('''
                CREATE PROCEDURE INSERT_DEBIT_ON_MOVEMENTS (ClientID INT, TransValor INT, TransDesc VARCHAR(10))
                RETURNS (RET_SALDO_LIM INT, RET_SALDO_TOTAL INT)
                AS
                DECLARE
                    TOTAL INT;
                DECLARE
                    LIMITE INT;
                DECLARE
                    OLD_CLI_LIM_ORG INT;	
                DECLARE
                    OLD_SALDO_TOTAL INT;
                DECLARE
                    OLD_SALDO_LIM INT;
                BEGIN
                    SELECT FIRST 1 MV.CLI_LIM_ORG, MV.SALDO_TOTAL, MV.SALDO_LIM
                    FROM MOVEMENTS AS MV
                    WHERE MV.CLI_ID = :ClientID
                    ORDER BY MV.ID DESC
                    INTO :OLD_CLI_LIM_ORG, :OLD_SALDO_TOTAL, :OLD_SALDO_LIM;
                    -- VALID CLIENT
                    IF (OLD_CLI_LIM_ORG IS NULL OR OLD_SALDO_TOTAL IS NULL OR OLD_SALDO_LIM IS NULL) THEN
                    BEGIN
                        EXCEPTION CLIENT_NOT_FOUND 'Client not found';
                    END
                    -- UPDATE TOTAL
                    TOTAL = OLD_SALDO_TOTAL + TransValor;
                    LIMITE = OLD_CLI_LIM_ORG - ABS(TOTAL);
                    IF (TOTAL > 0) THEN
                    BEGIN
                        LIMITE = OLD_CLI_LIM_ORG;
                    END
                    IF (LIMITE < 0) THEN
                    BEGIN
                        EXCEPTION LIMIT_EXCEEDED 'Limit exceeded';
                    END
                    -- INSERT NEW RECORD
                    INSERT INTO MOVEMENTS
                        (CLI_ID, CLI_LIM_ORG, SALDO_TOTAL,
                         SALDO_LIM, UTL_TRANS_DESC, UTL_TRANS_REAL_EM,
                         UTL_TRANS_TIPO, UTL_TRANS_VALOR)
                    VALUES
                        (:ClientID, :OLD_CLI_LIM_ORG, :TOTAL,
                         :LIMITE, :TransDesc, CURRENT_TIMESTAMP,
                         'd', ABS(:TransValor)); 
                    -- RETURNING VALUES
                    RET_SALDO_LIM = LIMITE;
                    RET_SALDO_TOTAL = TOTAL;
                END''')
            connection.commit()
            return True
    except Exception:
        traceback.print_exc()
        return False


async def make_initial_setup(users: list) -> None:
    """Create initial users"""
    try:
        if await create_table():
            validated_users = ClientListSchema(each_item=users)
            for user in validated_users.each_item:
                if await create_user(user=user):
                    print(f'User: {user.id} was created in database with successfully!!!')
    except Exception:
        traceback.print_exc()
