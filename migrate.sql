CREATE TABLE IF NOT EXISTS MOVEMENTS (
    ID SERIAL PRIMARY KEY,
    CLI_ID INTEGER NOT NULL,
    CLI_LIM_ORG INTEGER NOT NULL,
    SALDO_TOTAL INTEGER NOT NULL,
    SALDO_LIM INTEGER NOT NULL CHECK (SALDO_LIM >= 0),
    UTL_TRANS_DESC VARCHAR(10),
    UTL_TRANS_REAL_EM TIMESTAMP NOT NULL,
    UTL_TRANS_TIPO CHAR(1) CHECK (UTL_TRANS_TIPO IN ('c', 'd')),
    UTL_TRANS_VALOR INTEGER
);

CREATE INDEX IF NOT EXISTS IDX_CLI_ID ON MOVEMENTS (CLI_ID);

DELETE FROM MOVEMENTS;
COMMIT;

CREATE OR REPLACE FUNCTION GET_MOVEMENTS(ClientID INT)
RETURNS TABLE (
    ID INT,
    CLI_ID INT,
    CLI_LIM_ORG INT,
    SALDO_TOTAL INT,
    SALDO_LIM INT,
    UTL_TRANS_DESC VARCHAR(10),
    UTL_TRANS_REAL_EM TIMESTAMP,
    UTL_TRANS_TIPO CHAR(1),
    UTL_TRANS_VALOR INT
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        MV.ID,
        MV.CLI_ID,
        MV.CLI_LIM_ORG,
        MV.SALDO_TOTAL,
        MV.SALDO_LIM,
        MV.UTL_TRANS_DESC,
        MV.UTL_TRANS_REAL_EM,
        MV.UTL_TRANS_TIPO,
        MV.UTL_TRANS_VALOR
    FROM MOVEMENTS AS MV
    WHERE MV.CLI_ID = ClientID
    ORDER BY MV.ID DESC
    LIMIT 10;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION INSERT_CREDIT_ON_MOVEMENTS(ClientID INT, TransValor INT, TransDesc VARCHAR(10))
RETURNS TABLE (
    RET_SALDO_LIM INT,
    RET_SALDO_TOTAL INT
)
AS $$
DECLARE
    TOTAL INT;
    LIMITE INT;
    OLD_CLI_LIM_ORG INT;
    OLD_SALDO_TOTAL INT;
    OLD_SALDO_LIM INT;
BEGIN
    SELECT
        MV.CLI_LIM_ORG,
        MV.SALDO_TOTAL,
        MV.SALDO_LIM
    INTO
        OLD_CLI_LIM_ORG,
        OLD_SALDO_TOTAL,
        OLD_SALDO_LIM
    FROM MOVEMENTS AS MV
    WHERE MV.CLI_ID = ClientID
    ORDER BY MV.ID DESC
    LIMIT 1;

    TOTAL := OLD_SALDO_TOTAL + TransValor;
    LIMITE := OLD_SALDO_LIM + TransValor;

    IF (LIMITE > OLD_CLI_LIM_ORG) THEN
        LIMITE := OLD_CLI_LIM_ORG;
    END IF;

    INSERT INTO MOVEMENTS
        (CLI_ID, CLI_LIM_ORG, SALDO_TOTAL, SALDO_LIM, UTL_TRANS_DESC, UTL_TRANS_REAL_EM, UTL_TRANS_TIPO, UTL_TRANS_VALOR)
    VALUES
        (ClientID, OLD_CLI_LIM_ORG, TOTAL, LIMITE, TransDesc, CURRENT_TIMESTAMP, 'c', TransValor);

    RETURN QUERY
    SELECT
        LIMITE,
        TOTAL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION INSERT_DEBIT_ON_MOVEMENTS(ClientID INT, TransValor INT, TransDesc VARCHAR(10))
RETURNS TABLE (
    RET_SALDO_LIM INT,
    RET_SALDO_TOTAL INT
)
AS $$
DECLARE
    TOTAL INT;
    LIMITE INT;
    OLD_CLI_LIM_ORG INT;
    OLD_SALDO_TOTAL INT;
    OLD_SALDO_LIM INT;
BEGIN
    SELECT
        MV.CLI_LIM_ORG,
        MV.SALDO_TOTAL,
        MV.SALDO_LIM
    INTO
        OLD_CLI_LIM_ORG,
        OLD_SALDO_TOTAL,
        OLD_SALDO_LIM
    FROM MOVEMENTS AS MV
    WHERE MV.CLI_ID = ClientID
    ORDER BY MV.ID DESC
    LIMIT 1;

    -- VALID CLIENT
    IF (OLD_CLI_LIM_ORG IS NULL OR OLD_SALDO_TOTAL IS NULL OR OLD_SALDO_LIM IS NULL) THEN
        RAISE EXCEPTION 'Client not found';
    END IF;

    -- UPDATE TOTAL
    TOTAL := OLD_SALDO_TOTAL + TransValor;
    LIMITE := OLD_CLI_LIM_ORG - ABS(TOTAL);

    IF (TOTAL > 0) THEN
        LIMITE := OLD_CLI_LIM_ORG;
    END IF;

    IF (LIMITE < 0) THEN
        RAISE EXCEPTION 'Limit exceeded';
    END IF;

    -- INSERT NEW RECORD
    INSERT INTO MOVEMENTS
        (CLI_ID, CLI_LIM_ORG, SALDO_TOTAL, SALDO_LIM, UTL_TRANS_DESC, UTL_TRANS_REAL_EM, UTL_TRANS_TIPO, UTL_TRANS_VALOR)
    VALUES
        (ClientID, OLD_CLI_LIM_ORG, TOTAL, LIMITE, TransDesc, CURRENT_TIMESTAMP, 'd', ABS(TransValor));

    -- RETURNING VALUES
    RETURN QUERY
    SELECT
        LIMITE,
        TOTAL;
END;
$$ LANGUAGE plpgsql;

